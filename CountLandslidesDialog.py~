"""
/***************************************************************************
Name			 	 : Zoom plugin
Description          : Zooms to a point when the user hits the button.
Date                 : 19/Nov/13 
copyright            : (C) 2013 by Dimitris Kavroudakis
email                : onoma@in.gr 
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt4 import QtCore, QtGui 
from Ui_CountLandslides import Ui_CountLandslides
from glob import glob
from os import path
import numpy
import os
from osgeo import gdal
from osgeo import ogr
import osr
import shutil
import time

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from qgis.core import *
from qgis.gui import *


# create the dialog for inventory queries
class CountLandslidesDialog(QtGui.QDialog):

  #constants: 
  #CELLSIZE = 27.55285031  
  CELLSIZE = 27.4119
  
  #class variables:
  iface = None
  path_to_usgs_catalog = None
  
  def __init__(self, interface, pathToUsgsCatalog): 
    QtGui.QDialog.__init__(self) 
    # Set up the user interface from Designer. 
    self.ui = Ui_CountLandslides ()
    self.ui.setupUi(self)
    self.iface = interface
    self.path_to_usgs_catalog = pathToUsgsCatalog

  #Event handling in case "OK" was pressed
  def accept(self):
      
    

    landslides = self.ui.getSelectedLandslideLayer()
#    mappingUnits = QgsVectorLayer("D:/Uni/LandslideDB/count/mappingunits.shp", "Mapping units", "ogr")
#    mappingUnits = QgsVectorLayer("D:/Uni/Diss/gisdata/paper1/aster-gdem/karadarya-mapping-units/su750-sel.shp", "Mapping units", "ogr")
#    mappingUnits = QgsVectorLayer("/misc/ro7/dgolovko/gisdata/paper1/aster-gdem/karadarya-mapping-units/fin/mapping-units-karadarya.shp", "Mapping units", "ogr")
    mappingUnits = QgsVectorLayer("/misc/ro7/dgolovko/gisdata/paper1/aster-gdem/karadarya-mapping-units/fin/su750.shp", "Mapping units", "ogr")
    mappingUnitsCopy = QgsVectorLayer("Polygon?crs=EPSG:32643", "Mapping units", "memory")
    mappingUnitsCopy.startEditing()
    for field in mappingUnits.dataProvider().fields():
        mappingUnitsCopy.dataProvider().addAttributes([field])
    for mappingUnit in mappingUnits.getFeatures():
        mappingUnitsCopy.dataProvider().addFeatures([mappingUnit])
    mappingUnitsCopy.dataProvider().addAttributes([QgsField("Count", QVariant.Int)])
    mappingUnitsCopy.updateFields()
    mappingUnitsCopy.commitChanges()
    mappingUnitsCopy.updateExtents()
    
#    demRaster = gdal.Open('D:/Uni/LandslideDB/count/tienshan_dem_wgs84.tif')
#    demRaster = gdal.Open('D:/Uni/LandslideDB/public/astergdem/aster_utm(kub).tif')
    demRaster = gdal.Open('/misc/ro7/dgolovko/gisdata/paper1/aster-gdem-lydia/1-input-projected-cubic-dem/aster_utm(kub).tif')
    demBand = demRaster.GetRasterBand(1)
    demTransform = demRaster.GetGeoTransform()
    demOriginX = demTransform[0]
    demOriginY = demTransform[3]
    demPixelWidth = demTransform[1]
    demPixelHeight = demTransform[5]
    
    highestPoints = QgsVectorLayer("Point?crs=EPSG:32643", "Highest points", "memory")
    highestPoints.startEditing()
    
    
    for landslide in landslides.getFeatures():
        #create temporary folder:
#        tempFolderName = "D:/Uni/LandslideDB/count"
        tempFolderName = "/misc/ro7/dgolovko/public/count"
        intermediateResultsFolderName = tempFolderName + "/temp/"

        iterate = True
        while iterate == True:
            if os.path.exists(intermediateResultsFolderName):
                try:
                    shutil.rmtree(intermediateResultsFolderName)
                except:
                    time.sleep(5)
                else:
                    iterate = False
            else:
                iterate = False
            
        os.makedirs(intermediateResultsFolderName)
    
        singleFeatureVectorLayerFileName = intermediateResultsFolderName + "singlefeature.shp"
        singleFeatureVectorLayer = QgsVectorLayer("Polygon?crs=EPSG:32643", "Single feature layer", "memory")
        fet = QgsFeature()
        fet.setGeometry(landslide.geometry())
        singleFeatureVectorLayer.dataProvider().addFeatures([fet])
        QgsVectorFileWriter.writeAsVectorFormat(singleFeatureVectorLayer, singleFeatureVectorLayerFileName, "CP1250", None, "ESRI Shapefile")
    
        command = 'gdal_rasterize -at -burn 1 -tr 27.55285031 27.55285031 ' + singleFeatureVectorLayerFileName + ' ' + intermediateResultsFolderName + 'rasterized.tif'
        os.system(command)

        pathToClippedRaster = intermediateResultsFolderName + "rasterized.tif"
        maskedRaster = gdal.Open(pathToClippedRaster)
        try:
            inputBand = maskedRaster.GetRasterBand(1)
        
            cols = maskedRaster.RasterXSize
            rows = maskedRaster.RasterYSize       
            data = inputBand.ReadAsArray(0, 0, cols, rows)
            transform = maskedRaster.GetGeoTransform()
            originX = transform[0]
            originY = transform[3]
            pixelWidth = transform[1]
            pixelHeight = transform[5]
        
            maxHeight = -1
            maxHeightIndices = [0.0, 0.0] 
        
            for col in range(0, cols):
                for row in range(0, rows):
                    if data[row, col] == 1:
                        pixelCenterX = originX + col * pixelWidth + 0.5 * pixelWidth
                        pixelCenterY = originY + row * pixelHeight - 0.5 * pixelWidth
                        demXOffset = int((pixelCenterX - demOriginX) / demPixelWidth)
                        demYOffset = int((pixelCenterY - demOriginY) / demPixelHeight)
                        heightValue = demBand.ReadAsArray(demXOffset, demYOffset, 1, 1)
                        if heightValue > maxHeight:
                            maxHeight = heightValue
                            maxHeightIndices = [pixelCenterX, pixelCenterY]

        
        
            if maxHeight != -1:     
                highestPoint = QgsFeature()
                point = QgsPoint(maxHeightIndices[0], maxHeightIndices[1])
                highestPointGeom = QgsGeometry.fromPoint(point)
                highestPoint.setGeometry(highestPointGeom)
                highestPoints.dataProvider().addFeatures([highestPoint])
        
        except:
            count = 1
        
        singleFeatureVectorLayer = None
        singleFeatureVectorLayerFileName = None
        fet = None
        command = None
        pathToClippedRaster = None
        maskedRaster = None
        inputBand = None
        data = None
        
    highestPoints.commitChanges()
    highestPoints.updateExtents()

    
    mappingUnitsCopy.startEditing()
    for mappingUnit in mappingUnitsCopy.getFeatures():
        count = 0
        for highestPoint in highestPoints.getFeatures():
            if mappingUnit.geometry().contains(highestPoint.geometry()):
                count = count + 1
        fieldIndex = len(mappingUnitsCopy.dataProvider().fields()) - 1
        mappingUnitsCopy.changeAttributeValue(mappingUnit.id(), fieldIndex, count)
                
    mappingUnitsCopy.commitChanges()  
    mappingUnitsCopy.updateExtents()
    QgsMapLayerRegistry.instance().addMapLayer(mappingUnitsCopy)
    
    #close the window if button pressed:
    super(CountLandslidesDialog, self).accept()

    
  def getOpenMapLayers(self):
      layers = QgsMapLayerRegistry.instance().mapLayers()
      return layers
    
